name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: prod
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check required secrets
        run: |
          if [ -z "${{ secrets.HETZNER_HOST }}" ]; then
            echo "Error: HETZNER_HOST secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.HETZNER_USERNAME }}" ]; then
            echo "Error: HETZNER_USERNAME secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.HETZNER_SSH_KEY }}" ]; then
            echo "Error: HETZNER_SSH_KEY secret is not set"
            exit 1
          fi

      - name: Deploy to Hetzner
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USERNAME }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            # Navigate to app directory
            cd ~/app

            # Pull latest changes from git
            if [ -d .git ]; then
              git pull
            else
              git clone https://github.com/${{ github.repository }}.git .
            fi

            # Create self-signed certificate for default server if it doesn't exist
            if [ ! -f /etc/ssl/certs/nginx-selfsigned.crt ]; then
              sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                -keyout /etc/ssl/private/nginx-selfsigned.key \
                -out /etc/ssl/certs/nginx-selfsigned.crt \
                -subj "/CN=localhost"
              sudo chmod 644 /etc/ssl/certs/nginx-selfsigned.crt
              sudo chmod 640 /etc/ssl/private/nginx-selfsigned.key
            fi

            # Export environment variables for docker-compose
            export REGISTRY="${{ env.REGISTRY }}"
            export IMAGE_NAME="${{ env.IMAGE_NAME }}"

            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull the latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Stop and remove existing containers
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml down
            
            # Start new containers with production configuration
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
            
            # Clean up unused images
            docker image prune -f
            
            # Verify deployment with retries
            echo "Waiting for service to start..."
            max_retries=12
            retry_count=0
            while [ $retry_count -lt $max_retries ]; do
              sleep 10
              if curl -sk -I https://aleromano.com | grep -q "200 OK"; then
                echo "Deployment successful!"
                exit 0
              fi
              echo "Attempt $((retry_count + 1))/$max_retries - Service not ready yet..."
              retry_count=$((retry_count + 1))
              
              # Check container logs if we're halfway through retries
              if [ $retry_count -eq $((max_retries / 2)) ]; then
                echo "Checking container logs..."
                docker-compose -f docker-compose.yml -f docker-compose.prod.yml logs --tail=50
              fi
            done
            
            echo "Deployment verification failed. Checking final logs..."
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml logs --tail=100
            exit 1 