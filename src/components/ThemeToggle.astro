<button id="theme-toggle" aria-label="Toggle theme">
    <div class="toggle-container">
        <!-- Sun SVG -->
        <svg class="sun" width="24" height="24" viewBox="0 0 24 24">
            <circle cx="12" cy="12" r="6" fill="currentColor"></circle>
            <g class="sun-beams" stroke="currentColor" stroke-width="2" stroke-linecap="round">
                <line x1="12" y1="1" x2="12" y2="3"></line>
                <line x1="12" y1="21" x2="12" y2="23"></line>
                <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
                <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
                <line x1="1" y1="12" x2="3" y2="12"></line>
                <line x1="21" y1="12" x2="23" y2="12"></line>
                <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
                <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
            </g>
        </svg>

        <!-- Moon SVG -->
        <svg class="moon" width="24" height="24" viewBox="0 0 24 24">
            <path
                fill="currentColor"
                d="M11.38 2.019a7.5 7.5 0 1 0 10.6 10.6C21.662 17.854 17.316 22 12.001 22 6.477 22 2 17.523 2 12c0-5.315 4.146-9.661 9.38-9.981z"
            ></path>
        </svg>
    </div>
</button>

<style>
    #theme-toggle {
        padding: 0.5rem;
        background: none;
        border: none;
        cursor: pointer;
        color: var(--color-primary);
        background-color: var(--color-secondary);
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        overflow: hidden;
    }

    #theme-toggle:hover {
        transform: scale(1.1);
        background-color: var(--color-tag-hover);
    }

    .toggle-container {
        position: relative;
        width: 24px;
        height: 24px;
    }

    .sun,
    .moon {
        position: absolute;
        top: 0;
        left: 0;
        transition:
            transform 0.6s cubic-bezier(0.68, -0.55, 0.27, 1.55),
            opacity 0.6s ease;
    }

    .sun-beams {
        transform-origin: center center;
        transition:
            transform 0.6s cubic-bezier(0.68, -0.55, 0.27, 1.55),
            opacity 0.6s ease;
    }

    /* Light theme (default) */
    .moon {
        transform: translateX(-40px) rotate(-60deg);
        opacity: 0;
    }

    /* Dark theme */
    [data-theme='dark'] .sun {
        transform: translateX(40px) rotate(60deg);
        opacity: 0;
    }

    [data-theme='dark'] .sun-beams {
        transform: rotate(45deg);
        opacity: 0;
    }

    [data-theme='dark'] .moon {
        transform: translateX(0) rotate(0);
        opacity: 1;
    }
</style>

<script>
    const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
            return localStorage.getItem('theme');
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return 'dark';
        }
        return 'light';
    })();

    if (theme === 'light') {
        document.documentElement.setAttribute('data-theme', 'light');
    } else {
        document.documentElement.setAttribute('data-theme', 'dark');
    }

    window.localStorage.setItem('theme', theme);

    const handleToggleClick = () => {
        const element = document.documentElement;
        element.setAttribute('data-theme', element.getAttribute('data-theme') === 'light' ? 'dark' : 'light');

        window.localStorage.setItem('theme', element.getAttribute('data-theme') ?? 'light');
    };

    document.getElementById('theme-toggle')?.addEventListener('click', handleToggleClick);
</script>
