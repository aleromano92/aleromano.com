---
import type { CollectionEntry } from 'astro:content';
import type { SupportedLanguage } from '../types/i18n';
import { parseSlides } from '../utils/presentations';

import 'reveal.js/dist/reveal.css';
import 'reveal.js/dist/theme/night.css';

declare global {
    interface Window {
        presentationSlides?: string[];
        slideDelimiter?: string;
    }
}

interface Props {
    presentation: CollectionEntry<'presentations'>;
    language: SupportedLanguage;
    blogPostSlug: string;
}

const { presentation, language, blogPostSlug } = Astro.props;

// Parse slides on the server side for better performance and reliability
const slides = parseSlides(presentation.body);

// Generate back to blog post URL
const backUrl = language === 'en' ? `/posts/${blogPostSlug}` : `/it/posts/${blogPostSlug}`;
const backText = language === 'it' ? 'Torna al post' : 'Back to post';

// Generate print URL with query parameter
const printUrl = `${Astro.url.pathname}?print-pdf`;
const printText = language === 'it' ? 'Stampa PDF' : 'Print PDF';
---

<!doctype html>
<html lang={language}>
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>{presentation.data.title} - Presentation</title>
    </head>
    <body>
        <div class="reveal">
            <div class="slides">
                {
                    slides.map((slideContent) => (
                        <section data-markdown data-separator-notes="^Note:">
                            <script is:inline type="text/template" set:html={slideContent} />
                        </section>
                    ))
                }
            </div>
        </div>

        <a href={backUrl} class="back-to-blog-button">{backText}</a>
        <a href={printUrl} class="print-pdf-button" target="_blank" rel="noopener">{printText}</a>

        <script>
            import Reveal from 'reveal.js';
            import Markdown from 'reveal.js/plugin/markdown/markdown.esm.js';
            import Notes from 'reveal.js/plugin/notes/notes.esm.js';
            import Zoom from 'reveal.js/plugin/zoom/zoom.esm.js';

            // Initialize Reveal.js when DOM is ready
            document.addEventListener('DOMContentLoaded', function () {
                const deck = new Reveal({
                    plugins: [Markdown, Notes, Zoom],
                    hash: true,
                    transition: 'slide',
                    controls: true,
                    progress: true,
                    center: false,
                    touch: true,
                    keyboard: true,
                    overview: true,
                    help: true,
                    // PDF export configuration
                    pdfMaxPagesPerSlide: 1,
                    pdfSeparateFragments: false,
                });

                deck.initialize();

                // Setup keyboard handlers
                document.addEventListener('keydown', function (event) {
                    if (event.key === 'Escape') {
                        const backLink = document.querySelector('.back-to-blog') as HTMLAnchorElement;
                        if (backLink) {
                            window.location.href = backLink.href || '/';
                        }
                    }
                });
            });
        </script>
    </body>
</html>

<!-- Custom styles to match website theme -->
<style>
    body {
        margin: 0;
        padding: 0;
        background: #111;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
    }

    .reveal {
        font-family: inherit;
    }

    .reveal .slides section {
        text-align: left;
    }

    .reveal h1,
    .reveal h2,
    .reveal h3 {
        text-align: center;
        margin-bottom: 2rem;
    }

    .back-to-blog-button {
        position: fixed;
        top: 1rem;
        left: 1rem;
        z-index: 1000;
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        text-decoration: none;
        font-size: 0.9rem;
        transition: background 0.2s ease;
    }

    .back-to-blog-button:hover {
        background: rgba(0, 0, 0, 0.9);
        color: white;
    }

    .print-pdf-button {
        position: fixed;
        top: 1rem;
        right: 1rem;
        z-index: 1000;
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        text-decoration: none;
        font-size: 0.9rem;
        transition: background 0.2s ease;
    }

    .print-pdf-button:hover {
        background: rgba(0, 0, 0, 0.9);
        color: white;
    }

    /* Print mode optimizations */
    @media print {
        .back-to-blog-button,
        .print-pdf-button {
            display: none !important;
        }
    }

    /* Mobile responsive adjustments */
    @media (max-width: 768px) {
        .back-to-blog-button,
        .print-pdf-button {
            font-size: 0.8rem;
            padding: 0.4rem 0.8rem;
        }
    }
</style>
